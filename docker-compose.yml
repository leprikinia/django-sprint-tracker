services:
  db:
    image: postgres:16
    container_name: db
    env_file: .env
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["dev", "prod"]
  
  api:
    container_name: api
    build:
      context: .
      target: runtime
    environment:
      DATABASE_HOST: ${DATABASE_HOST:-db}
      DB_PORT: ${DB_PORT:-5432}
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    profiles: ["prod"]


  api-dev:
    container_name: api-dev
    build:
      context: .
      target: dev
    env_file: .env
    volumes:
      - .:/app:delegated
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
    profiles: ["dev"]

volumes:
   pgdata:
